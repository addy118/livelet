generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
  REVOKED
}

enum RoomRole {
  OWNER
  MEMBER
}

enum RoomAccess {
  VIEW
  EDIT
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)

  accounts   Account[]
  groups     UserGroup[]
  rooms      UserRoom[]  @relation(name: "UserRoom")
  groupOwner Group[]
  roomOwner  Room[]
  inviter    UserRoom[]  @relation(name: "Inviter")

  isTwoFactorEnabled    Boolean                @default(false)
  TwoFactorConfirmation TwoFactorConfirmation?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt

  @@index([id])
  @@index([email])
}

model Group {
  id      String @id @default(cuid())
  name    String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  users UserGroup[]
  rooms GroupRoom[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model Room {
  id      String     @id
  name    String
  owner   User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String
  default RoomAccess @default(VIEW)

  users  UserRoom[]
  groups GroupRoom[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model UserRoom {
  user   User   @relation(name: "UserRoom", fields: [userId], references: [id], onDelete: Cascade)
  userId String
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId String

  access RoomAccess @default(VIEW)
  role   RoomRole   @default(MEMBER)

  inviter   User?        @relation(name: "Inviter", fields: [invitedBy], references: [id], onDelete: Cascade)
  invitedBy String?
  status    InviteStatus @default(PENDING)
  joinedAt  DateTime?

  @@id([userId, roomId])
  @@index([userId])
  @@index([roomId])
}

model GroupRoom {
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String
  room    Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId  String

  access RoomAccess @default(VIEW)

  @@id([groupId, roomId])
  @@index([groupId])
  @@index([roomId])
}

model UserGroup {
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String

  joinedAt DateTime @default(now())

  @@id([userId, groupId])
  @@index([userId])
  @@index([groupId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PassResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
